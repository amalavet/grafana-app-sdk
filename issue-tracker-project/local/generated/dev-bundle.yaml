kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1
metadata:
    name: issues.issuetrackerproject.ext.grafana.com
spec:
    group: issuetrackerproject.ext.grafana.com
    versions:
        - name: v1
          served: true
          storage: true
          schema:
            openAPIV3Schema:
                properties:
                    spec:
                        description: |-
                            spec is the schema of our resource.
                            We could include `status` or `metadata` top-level fields here as well,
                            but `status` is for state information, which we don't need to track,
                            and `metadata` is for kind/schema-specific custom metadata in addition to the existing
                            common metadata, and we don't need to track any specific custom metadata.
                        properties:
                            description:
                                type: string
                            status:
                                type: string
                            title:
                                type: string
                        required:
                            - title
                            - description
                            - status
                        type: object
                    status:
                        properties:
                            additionalFields:
                                description: additionalFields is reserved for future use
                                type: object
                                x-kubernetes-preserve-unknown-fields: true
                            operatorStates:
                                additionalProperties:
                                    properties:
                                        descriptiveState:
                                            description: descriptiveState is an optional more descriptive state field which has no requirements on format
                                            type: string
                                        details:
                                            description: details contains any extra information that is operator-specific
                                            type: object
                                            x-kubernetes-preserve-unknown-fields: true
                                        lastEvaluation:
                                            description: lastEvaluation is the ResourceVersion last evaluated
                                            type: string
                                        state:
                                            description: |-
                                                state describes the state of the lastEvaluation.
                                                It is limited to three possible states for machine evaluation.
                                            enum:
                                                - success
                                                - in_progress
                                                - failed
                                            type: string
                                    required:
                                        - lastEvaluation
                                        - state
                                    type: object
                                description: |-
                                    operatorStates is a map of operator ID to operator state evaluations.
                                    Any operator which consumes this kind SHOULD add its state evaluation information to this field.
                                type: object
                        type: object
                required:
                    - spec
                type: object
          subresources:
            status: {}
    names:
        kind: Issue
        plural: issues
    scope: Namespaced

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: issue-user
rules:
  - apiGroups:
      - issuetrackerproject.ext.grafana.com
    resources:
      - issues
      - issues/status
    verbs:
      - create
      - update
      - patch
      - delete
      - deletecollection
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: issue-lister
rules:
  - apiGroups:
      - issuetrackerproject.ext.grafana.com
    resources:
      - issues
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: aggregator-access
rules:
  - apiGroups: ["issuetrackerproject.ext.grafana.com"]
    resources: ["*"]
    verbs: ["*"]
  - nonResourceURLs:
      - "/openapi/*"
      - "/apis/issuetrackerproject.ext.grafana.com/*"
    verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: aggregator-unauth-access-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aggregator-access
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: Group
    name: system:unauthenticated
---
ï»¿apiVersion: v1
kind: Service
metadata:
  labels:
    name: minio
  name: minio
  namespace: default
spec:
  ports:
    - name: minio-minio
      port: 9000
      targetPort: 9000
  selector:
    name: minio
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: default
spec:
  minReadySeconds: 10
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: minio
  template:
    metadata:
      labels:
        name: minio
    spec:
      containers:
        - args:
            - mkdir -p /data/cortex && mkdir -p /data/loki && /usr/bin/minio server /data
          command:
            - /bin/bash
            - -c
          env:
            - name: MINIO_ACCESS_KEY
              value: minio
            - name: MINIO_SECRET_KEY
              value: minio123
            - name: MINIO_PROMETHEUS_AUTH_TYPE
              value: public
          image: minio/minio:RELEASE.2025-05-24T17-08-30Z
          imagePullPolicy: IfNotPresent
          name: minio
          ports:
            - containerPort: 9000
              name: minio
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cortex-config
  namespace: default
data:
  config.yaml: |
    # Configuration for running Cortex in single-process mode.
    # This configuration should not be used in production.
    # It is only for getting started and development.

    # Disable the requirement that every request to Cortex has a
    # X-Scope-OrgID header. `fake` will be substituted in instead.
    auth_enabled: false

    server:
      http_listen_port: 9009
      grpc_listen_port: 9095

      # Configure the server to allow messages up to 100MB.
      grpc_server_max_recv_msg_size: 104857600
      grpc_server_max_send_msg_size: 104857600
      grpc_server_max_concurrent_streams: 1000

    distributor:
      shard_by_all_labels: true
      pool:
        health_check_ingesters: true

    ingester_client:
      grpc_client_config:
        # Configure the client to allow messages up to 100MB.
        max_recv_msg_size: 104857600
        max_send_msg_size: 104857600
        grpc_compression: gzip

    ingester:
      # We want our ingesters to flush chunks at the same time to optimise
      # deduplication opportunities.
      spread_flushes: true
      chunk_age_jitter: 0

      walconfig:
        wal_enabled: true
        recover_from_wal: true
        wal_dir: /tmp/cortex/wal

      lifecycler:
        # The address to advertise for this ingester.  Will be autodiscovered by
        # looking up address on eth0 or en0; can be specified if this fails.
        # address: 127.0.0.1

        # We want to start immediately and flush on shutdown.
        join_after: 0
        min_ready_duration: 0s
        final_sleep: 0s
        num_tokens: 512
        tokens_file_path: /tmp/cortex/wal/tokens

        # Use an in memory ring store, so we don't need to launch a Consul.
        ring:
          kvstore:
            store: inmemory
          replication_factor: 1

    storage:
      engine: blocks

    blocks_storage:
      tsdb:
        dir: /tmp/cortex/tsdb
      bucket_store:
        sync_dir: /tmp/cortex/tsdb-sync

      backend: filesystem
      filesystem:
        dir: /tmp/cortex/blocks

    purger:
      object_store_type: filesystem

    frontend_worker:
      # Configure the frontend worker in the querier to match worker count
      # to max_concurrent on the queriers.
      match_max_concurrent: true

    # Configure the ruler to scan the /tmp/cortex/rules directory for prometheus
    # rules: https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/#recording-rules
    ruler:
      enable_api: true
      enable_sharding: false
      storage:
        type: s3
        s3:
          s3: http://minio:minio123@minio.default.svc.cluster.local:9000
          bucketnames: cortex
          s3forcepathstyle: true

    querier:
      at_modifier_enabled: true
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: cortex
  name: cortex
  namespace: default
spec:
  ports:
    - name: cortex-http
      port: 9009
      targetPort: 9009
    - name: cortex-grpc
      port: 9095
      targetPort: 9095
  selector:
    name: cortex
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cortex
  namespace: default
spec:
  minReadySeconds: 10
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: cortex
  template:
    metadata:
      annotations:
        cortex-config-hash: 128d9bf6025033e3552baff9d5bb7715
      labels:
        name: cortex
    spec:
      containers:
        - args:
            - -config.file=/etc/cortex/config.yaml
          env:
            - name: JAEGER_AGENT_HOST
              value: tempo
            - name: JAEGER_ENDPOINT
              value: http://agent.default.svc.cluster.local:14268/api/traces
            - name: JAEGER_SAMPLER_TYPE
              value: const
            - name: JAEGER_SAMPLER_PARAM
              value: "1"
          image: cortexproject/cortex:v1.9.0
          imagePullPolicy: IfNotPresent
          name: cortex
          ports:
            - containerPort: 9009
              name: http
            - containerPort: 9095
              name: grpc
          volumeMounts:
            - mountPath: /etc/cortex
              name: cortex-config
      volumes:
        - configMap:
            name: cortex-config
          name: cortex-config
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: cortex-ingress
  namespace: default
spec:
  rules:
    - host: cortex.k3d.localhost
      http:
        paths:
          - backend:
              service:
                name: cortex
                port:
                  number: 9009
            path: /
            pathType: Prefix

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tempo-config
  namespace: default
data:
  overrides.yaml: |
    overrides: 
  tempo.yaml: |
    auth_enabled: false
    server:
      http_listen_port: 3100
    compactor:
      compaction:
        compacted_block_retention: 24h
    distributor:
      receivers:
        jaeger:
          protocols:
            thrift_compact:
              endpoint: 0.0.0.0:6831
        otlp:
          protocols:
            grpc:
              endpoint: 0.0.0.0:4317
    ingester: {}
    storage:
      trace:
        backend: local
        search:
        local:
          path: /tmp/tempo/traces
        wal:
          path: /tmp/tempo/wal 
          v2_encoding: none
          search_encoding: none
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tempo
  namespace: default
spec:
  minReadySeconds: 10
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: tempo
  template:
    metadata:
      annotations:
        tempo-config-hash: 1a64b8ef2f49f5c9e8057582936f2f7b
      labels:
        name: tempo
    spec:
      containers:
      - args:
        - -config.file=/conf/tempo.yaml
        - -mem-ballast-size-mbs=1024
        image: grafana/tempo:2.2.0
        imagePullPolicy: IfNotPresent
        name: tempo
        ports:
        - containerPort: 3100
          name: http
        - containerPort: 4317
          name: otlp-http
        volumeMounts:
        - mountPath: /conf
          name: tempo-config
      volumes:
      - configMap:
          name: tempo-config
        name: tempo-config
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: tempo
  name: tempo
  namespace: default
spec:
  ports:
  - name: tempo-http
    port: 3100
    targetPort: 3100
  - name: tempo-otlp-http
    port: 4317
    targetPort: 4317
  selector:
    name: tempo
---
ï»¿apiVersion: v1
data:
  agent.yml: |
    logs:
      configs:
        - name: k8sevents
          clients:
          - url: http://loki.default.svc.cluster.local:3100/loki/api/v1/push
            external_labels:
              cluster: my-cluster
              job: integrations/kubernetes/eventhandler
          positions:
            filename: /tmp/k8seventspositions.yaml
        - name: agent
          clients:
            - url: http://loki.default.svc.cluster.local:3100/loki/api/v1/push
              external_labels:
                cluster: my-cluster
          positions:
            filename: /tmp/positions.yaml
          target_config:
            sync_period: 10s
          scrape_configs:
          - job_name: integrations/kubernetes/pod-logs
            kubernetes_sd_configs:
              - role: pod
            pipeline_stages:
              - cri: {}
            relabel_configs:
              - source_labels:
                  - __meta_kubernetes_pod_label_name
                  - __meta_kubernetes_pod_label_app_kubernetes_io_name # also
                target_label: __service__
                separator: ""
              - source_labels:
                  - __meta_kubernetes_pod_node_name
                target_label: __host__
              - action: drop
                regex: ""
                source_labels:
                  - __service__
              - action: labelmap
                regex: __meta_kubernetes_pod_label_(.+)
              - action: replace
                replacement: $1
                separator: /
                source_labels:
                  - __meta_kubernetes_namespace
                  - __service__
                target_label: job
              - action: replace
                source_labels:
                  - __meta_kubernetes_namespace
                target_label: namespace
              - action: replace
                source_labels:
                  - __meta_kubernetes_pod_name
                target_label: pod
              - action: replace
                source_labels:
                  - __meta_kubernetes_pod_container_name
                target_label: container
              - replacement: /var/log/pods/*$1/*.log
                separator: /
                source_labels:
                  - __meta_kubernetes_pod_uid
                  - __meta_kubernetes_pod_container_name
                target_label: __path__
              - action: replace # `cluster` label is required for the mimir integration, so set a default value
                regex: ""
                replacement: k8s-cluster
                separator: ""
                source_labels:
                  - cluster
                target_label: cluster
              - action: replace
                source_labels:
                  - __meta_kubernetes_pod_container_name
                target_label: name
    metrics:
      global:
        scrape_interval: 15s
        remote_write:
        - url: "http://cortex.default.svc.cluster.local:9009/api/v1/push"
      configs:
        - name: default
          scrape_configs:
          - job_name: grafana
            static_configs:
              - targets: ['grafana.default.svc.cluster.local']
          - job_name: plugin
            metrics_path: '/api/plugins/issuetrackerproject-app/metrics'
            static_configs:
              - targets: ['grafana.default.svc.cluster.local']
          - job_name: operator
            static_configs:
              - targets: ['issuetrackerproject-app-operator.default.svc.cluster.local:9090']
      wal_directory: /var/lib/agent/data
    server:
        log_level: info
    traces:
        configs:
            - batch:
                send_batch_size: 1000
                timeout: 5s
              name: traces_default
              receivers:
                otlp:
                  protocols:
                    grpc:
                jaeger:
                    protocols:
                        thrift_compact: null
                        thrift_http: null
              remote_write:
                - endpoint: tempo.default.svc.cluster.local:4317
                  insecure: true
                  retry_on_failure:
                    enabled: true
                    initial_interval: 500ms
                    max_elapsed_time: 1s
kind: ConfigMap
metadata:
  name: grafana-agent-config
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: grafana-agent
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs:
  - get
  - list
  - watch
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: grafana-agent
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: grafana-agent
subjects:
- kind: ServiceAccount
  name: grafana-agent
  namespace: default
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana-agent
  namespace: default
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-agent
  namespace: default
spec:
  minReadySeconds: 10
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: grafana-agent
  template:
    metadata:
      annotations:
        grafana-agent-config-hash: ea051677fc887c7c7d9894f7d450fdb1
      labels:
        name: grafana-agent
    spec:
      containers:
      - args:
        - -config.file=/etc/agent/agent.yml
        - -server.http.address=0.0.0.0:80
        env:
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        image: grafana/agent:v0.35.2
        imagePullPolicy: IfNotPresent
        name: agent
        ports:
        - containerPort: 6831
          name: thrift-compact
          protocol: UDP
        - containerPort: 14268
          name: thrift-http
          protocol: TCP
        - containerPort: 4317
          name: otlp-grpc
          protocol: TCP
        volumeMounts:
        - mountPath: /etc/agent
          name: grafana-agent-config
        - mountPath: /var/log
          name: varlogs
          readOnly: true
      serviceAccount: grafana-agent
      volumes:
      - configMap:
          name: grafana-agent-config
        name: grafana-agent-config
      - hostPath:
          path: /var/log
        name: varlogs
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: grafana-agent
  name: grafana-agent
  namespace: default
spec:
  ports:
  - name: agent-thrift-compact
    port: 6831
    protocol: UDP
    targetPort: 6831
  - name: agent-thrift-http
    port: 14268
    protocol: TCP
    targetPort: 14268
  - name: agent-otel-grpc
    port: 4317
    protocol: TCP
    targetPort: 4317
  selector:
    name: grafana-agent

---
ï»¿apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-config
  namespace: default
data:
  config.yaml: | 
    auth_enabled: false
    server:
      http_listen_port: 3100
    common:
      path_prefix: /tmp/loki
      storage:
        filesystem:
          chunks_directory: /tmp/loki/chunks
          rules_directory: /tmp/loki/rules
      replication_factor: 1
      ring:
        instance_addr: 127.0.0.1
        kvstore:
          store: inmemory
    schema_config:
      configs:
        - from: 2020-10-24
          store: boltdb-shipper
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h
    ruler:
      alertmanager_url: http://localhost:9093
      storage:
        type: s3
        s3:
          s3: http://minio:minio123@minio.default.svc.cluster.local:9000
          bucketnames: loki
          s3forcepathstyle: true
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki
  namespace: default
spec:
  minReadySeconds: 10
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: loki
  template:
    metadata:
      annotations:
        loki-config-hash: 3ea717a076077bf16353d56e9f79510d
      labels:
        name: loki
    spec:
      containers:
      - args:
        - -config.file=/etc/loki/config.yaml
        env:
        - name: JAEGER_AGENT_HOST
          value: tempo
        - name: JAEGER_ENDPOINT
          value: http://agent.default.svc.cluster.local:14268/api/traces
        - name: JAEGER_SAMPLER_TYPE
          value: const
        - name: JAEGER_SAMPLER_PARAM
          value: "1"
        image: grafana/loki:2.8.4
        imagePullPolicy: IfNotPresent
        name: loki
        ports:
        - containerPort: 3100
          name: http
        - containerPort: 9095
          name: grpc
        volumeMounts:
        - mountPath: /etc/loki
          name: loki-config
      volumes:
      - configMap:
          name: loki-config
        name: loki-config
---
apiVersion: v1
kind: Service
metadata:
  labels:
    name: loki
  name: loki
  namespace: default
spec:
  ports:
  - name: loki-http
    port: 3100
    targetPort: 3100
  - name: loki-grpc
    port: 9095
    targetPort: 9095
  selector:
    name: loki
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: loki-ingress
  namespace: default
spec:
  rules:
  - host: loki.k3d.localhost
    http:
      paths:
      - backend:
          service:
            name: loki
            port:
              number: 3100
        path: /
        pathType: Prefix
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: grafana:issue-user-rolebinding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: issue-user
subjects:
  - kind: ServiceAccount
    name: grafana
    namespace: default
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: issuetrackerproject-app-provisioning
  namespace: default
  labels:
    name: grafana
data:
  gas-local-env-app-app.yaml: |
    apiVersion: 1
    apps:
      - type: issuetrackerproject-app
        org_id: 1
        org_name: Main Org.
        disabled: false
        jsonData:
          foo: bar
        secureJsonData:
          baz: foo
          kubeconfig: cluster
          kubenamespace: default

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-apiserver-provisioning
  namespace: default
  labels:
    name: grafana
data:
  apiservices.yaml: |
    - group: issuetrackerproject.ext.grafana.com
      version: v1
      host: kubernetes.default.svc
      port: 443
    
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: default
  labels:
    name: grafana
data:
  grafana.ini: |
    app_mode = development
    [analytics]
    reporting_enabled = false
    [tracing.opentelemetry.otlp]
    address = tempo.default.svc:4317
    [auth.anonymous]
    enabled = false
    [log.frontend]
    enabled = true
    [plugins]
    allow_loading_unsigned_plugins = issuetrackerproject-app
    [plugin.issuetrackerproject-app]
    tracing = true
    [server]
    http_port = 3000
    root_url = 
    router_logging = true
    [unified_alerting]
    enabled = true
    [users]
    default_theme = dark
    [feature_toggles]
    grafanaAPIServerEnsureKubectlAccess = true
    ; disable the experimental APIs flag to disable bundling of the example service locally
    grafanaAPIServerWithExperimentalAPIs = false
    kubernetesAggregator = true
    [grafana-apiserver]
    remote_services_file = /app-aggregator/apiservices.yaml
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: default
  labels:
    name: grafana
spec:
  ports:
    - name: grafana-grafana-metrics
      port: 3000
      targetPort: 3000
    - name: http
      port: 80
      targetPort: 3000
  selector:
    name: grafana
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: default
spec:
  minReadySeconds: 10
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: grafana
  template:
    metadata:
      labels:
        name: grafana
    spec:
      containers:
        - env:
            - name: GF_INSTALL_PLUGINS
              value: ""
            - name: GF_PATHS_CONFIG
              value: /etc/grafana-config/grafana.ini
          image: grafana/grafana-enterprise:main
          imagePullPolicy: IfNotPresent
          name: grafana
          ports:
            - containerPort: 3000
              name: grafana-metrics
          resources:
            requests:
              cpu: 10m
              memory: 40Mi
          volumeMounts:
            - mountPath: /etc/grafana-config
              name: grafana-config
            - mountPath: /etc/grafana/provisioning/plugins
              name: issuetrackerproject-app-provisioning
            - mountPath: /var/lib/grafana/plugins/issuetrackerproject-app
              name: issuetrackerproject-app
              readOnly: true
            - mountPath: /etc/grafana/provisioning/datasources
              name: grafana-datasources
            - mountPath: /app-aggregator
              name: grafana-apiserver-provisioning
              readOnly: true
      serviceAccount: grafana
      volumes:
        - configMap:
            name: grafana-config
          name: grafana-config
        - configMap:
            name: issuetrackerproject-app-provisioning
          name: issuetrackerproject-app-provisioning
        - hostPath:
            path: /tmp/k3d/mounted-files/plugin/dist
          name: issuetrackerproject-app
        - configMap:
            name: grafana-datasources
          name: grafana-datasources
        - configMap:
            name: grafana-apiserver-provisioning
          name: grafana-apiserver-provisioning
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana-ingress
  namespace: default
spec:
  rules:
    - host: grafana.k3d.localhost
      http:
        paths:
          - backend:
              service:
                name: grafana
                port:
                  number: 80
            path: /
            pathType: Prefix
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    name: grafana
  name: grafana-datasources
  namespace: default
data:
  Cortex.yml: |
    apiVersion: 1
    datasources:
        - access: proxy
          editable: false
          isDefault: true
          name: grafana-k3d-cortex-prom
          type: prometheus
          uid: grafana-prom-cortex
          url: http://cortex.default.svc.cluster.local:9009/api/prom
          version: 1
        - access: proxy
          editable: false
          isDefault: false
          name: grafana-k3d-tempo
          type: tempo
          uid: grafana-traces-tempo
          url: http://tempo.default.svc.cluster.local:3100
          version: 1
        - access: proxy
          editable: false
          isDefault: false
          name: grafana-k3d-loki
          type: loki
          uid: grafana-logs-loki
          url: http://loki.default.svc.cluster.local:3100
          version: 1

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: operator
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: operator:issue-user-rolebinding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: issue-user
subjects:
  - kind: ServiceAccount
    name: operator
    namespace: default
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: issuetrackerproject-app-operator
  namespace: default
spec:
  minReadySeconds: 10
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: issuetrackerproject-app-operator
  template:
    metadata:
      labels:
        name: issuetrackerproject-app-operator
    spec:
      serviceAccount: operator
      containers:
        - image: localhost/issue-tracker-project:latest
          imagePullPolicy: IfNotPresent
          name: issuetrackerproject-app-operator
          env:
            - name: OTEL_HOST
              value: tempo.default.svc
            - name: OTEL_PORT
              value: "4317"
            - name: OTEL_CONN_TYPE
              value: grpc
            - name: OTEL_SERVICE_NAME
              value: "issuetrackerproject-app-operator"

          ports:
            - containerPort: 9090
              name: metrics

---
apiVersion: v1
kind: Service
metadata:
  name: issuetrackerproject-app-operator
  namespace: default
spec:
  selector:
    name: issuetrackerproject-app-operator
  ports:
    - name: metrics
      port: 9090
      targetPort: metrics
