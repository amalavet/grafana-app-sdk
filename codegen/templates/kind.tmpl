//
// Code generated by grafana-app-sdk. DO NOT EDIT.
//

package {{.Package}}

import (
    "encoding/json"
    "fmt"
    "io"

    "github.com/grafana/grafana-app-sdk/resource"
)

type Kind struct {

}

func (k *Kind) Group() string {
    return "{{.Group}}"
}

func (k *Kind) Version() string {
    return "{{.Version}}"
}

func (k *Kind) Kind() string {
    return "{{.Kind}}"
}

func (k *Kind) Plural() string {
    return "{{.Plural}}"
}

func (k *Kind) ZeroValue() resource.Object {
    return &Object{}
}

func (k *Kind) Scope() resource.SchemaScope {
    return resource.{{.Scope}}Scope
}

func (k *Kind) Read(in io.Reader) (resource.Object2, error) {
    obj := &Object{}
    err := json.NewDecoder(in).Decode(&obj)
    if err != nil {
        return nil, err
    }
    if obj.GroupVersionKind().Kind != "{{.Kind}}" || obj.GroupVersionKind().Version != "{{.Version}}" || obj.GroupVersionKind().Group != "{{.Group}}" {
        return nil, fmt.Errorf("kind '%s' (%s/%s) cannot be unmarshaled into kind '{{.Kind}}' ({{.Group}}/{{.Version}})",
            obj.GroupVersionKind().Kind, obj.GroupVersionKind().Group, obj.GroupVersionKind().Version)
    }
    return obj, nil
}

func (k *Kind) Write(obj resource.Object2, out io.Writer) error {
    cast, ok := obj.(*Object)
    if !ok {
        return fmt.Errorf("cannot write object type which is not *{{.Package}}.Object")
    }
    return json.NewEncoder(out).Encode(cast)
}

// Interface compliance compile-time check
var _ resource.Kind = &Kind{}